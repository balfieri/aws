#!/usr/bin/perl -w
#
use strict;
use warnings;

my $count  = shift @ARGV || die "ERROR: create_insts <count>\n";
$count     = int( $count );

my $type;
my $image;
my $key;
my $group;
my $region;
my $zone;
my $command = "";
my $spot = "";
my $spot_type = "one-time";
while( @ARGV != 0 ) 
{
    my $arg = shift @ARGV;
    if ( $arg eq "-type" ) {
        $type = shift @ARGV;
    } elsif ( $arg eq "-image" ) {
        $image = shift @ARGV;
    } elsif ( $arg eq "-key" ) {
        $key = shift @ARGV;
    } elsif ( $arg eq "-group" ) {
        $group = shift @ARGV;
    } elsif ( $arg eq "-region" ) {
        $region = shift @ARGV;
    } elsif ( $arg eq "-zone" ) {
        $zone = shift @ARGV;
    } elsif ( $arg eq "-spot" ) {
        $spot = shift @ARGV;
    } elsif ( $arg eq "-spot_type" ) {
        $spot_type = shift @ARGV;
    } elsif ( $arg eq "-command" ) {
        $command = join( " ", @ARGV );
        @ARGV = ();
    } elsif ( $arg eq "-clone" || $arg eq "-clone_master" ) {
        die "ERROR: please run image_snapshot_inst to clone before running this command\n";
    } else {
        die "ERROR: unknown create_insts option '$arg'\n";
    }
}
defined $image  or $image = `owner_image`;
$image ne ""    or $image = `inst_image`;
$image ne ""    or die "ERROR: there is no owner_image or inst_image; please provide one using the -image ami-nnn option\n";
defined $type   or $type = `inst_type`;
$type ne ""     or die "ERROR: there is no inst_type; please provide one using the -type ... option\n";
defined $key    or $key = `inst_key`;
$key ne ""      or die "ERROR: there is no inst_key; please provide one using the -key ... option\n";
defined $group  or $group = `owner_group`;
$group ne ""    or die "ERROR: there is no owner_group; please run \"aws configure\" to establish it\n";

if ( $spot eq "" ) {
    defined $region or $region = `owner_region`;
    $command ne "" and $command = "--userdata '${command}'";
    system( "aws ec2 run-instances --count ${count} --image-id ${image} --instance-type ${type}" . 
            " --key-name ${key} --security-group-ids ${group} --region ${region} ${command}" );
} else {
    defined $zone or $zone = `inst_zone`;
    if ( $command ne "" ) {
        if ( $command =~ /^file:(.*)/ ) {
            $command = `base64 ${1}`; 
        } else {
            $command = `echo '${command}' | base64`; 
        }
        chomp $command;
        $command = ",UserData=${command}";
    }
    system( "aws ec2 request-spot-instances --instance-count ${count} --spot-price ${spot} --type ${spot_type} " .
            " --launch-specification ImageId=${image},KeyName=${key},SecurityGroupIds=${group}${command}," .
            "InstanceType=${type},Placement={AvailabilityZone=${zone}}" );
}
