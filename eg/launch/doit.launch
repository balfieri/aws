#!/usr/bin/env python3
#
# doit.launch - outer script that calls launch and checks results
#
import os
import sys
import subprocess
import re

c = 3   # number of instances to launch

def die( msg ):
    print( f'ERROR: {msg}' )
    sys.exit( 1 )

cmd_en = True
cmd_force_echo_stdout = True

def cmd( c, echo=True, echo_stdout=False, can_die=True, timeout=None ):  
    if echo: print( c, flush=True )
    if cmd_en:
        if echo_stdout or cmd_force_echo_stdout:
            info = subprocess.run( c, shell=True, text=True, timeout=timeout )
        else:
            info = subprocess.run( c, shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout )
        if can_die and info.returncode != 0: die( f'command failed: {c}' )
        return info.stdout
    else:
        return ''

def file_read( file_name ):
    if not os.path.exists( file_name ): die( f'file not found: {file_name}' )
    with open( file_name ) as my_file:
        data = my_file.read()
    return data

def match( s, pattern ): 
    return re.compile( pattern ).match( s )

def factorial( n ):
    r = 1
    while n > 1:
        r *= n
        n -= 1
    return r

# create bundle.tar.gz with files needed on launched instances
cmd( 'tar cvfz bundle.tar.gz main.cpp build.sh run.sh' )

# launch onto c instances and harvest results
cmd( f'launch -c {c} -do_launch 1 -do_harvest 1' )

# check results (specific to this example)
print( f'\nChecking results...' )
for i in range(c):
    print( f'Reading results{i}.out...' )
    s = file_read( f'results{i}.out' )
    lines = s.split( '\n' )
    have_pass = False
    have_factorial = False
    for line in lines:
        if match( line, r'^PASS' ): 
            have_pass = True

        m = match( line, r'^(\d+)\! = (\d+)' )
        if m:
            have_factorial = True
            n = int( m.group(1) )
            f = int( m.group(2) )
            if f != factorial( n ):
                die( f'bad factorial result: {line}' )
            
    if not have_pass: die( f'did not find PASS line' )
    if not have_factorial: die( f'did not find factorial result line' )

print( '\nPASSED' )
