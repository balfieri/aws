#!/usr/bin/env python3
#
import os
import sys
import subprocess

cmd_en = True

def die( msg ):
    print( f'ERROR: {msg}' )
    sys.exit( 1 )

def cmd( c, echo=True, echo_stdout=False, can_die=True ):
    if echo: print( c )
    if cmd_en:
        info = subprocess.run( c, shell=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT )
        if echo_stdout: print( info.stdout )
        if can_die and info.returncode != 0: die( f'command failed: {c}' )
        return info.stdout
    else:
        return ''

def get_script_dir():
    script_path = sys.argv[0]
    abs_script_path = os.path.abspath( script_path )
    return os.path.dirname( abs_script_path )

bundle_name = 'bundle'
inst_cnt    = 1
do_launch   = True
do_harvest  = True
spot        = ''

i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    i += 1
    if   arg == '-bundle':
        bundle_name = sys.argv[i]
    elif arg == '-c': 
        inst_cnt = int(sys.argv[i])
    elif arg == '-do_launch':
        do_launch = int(sys.argv[i]) == 1
    elif arg == '-do_harvest':
        do_harvest = int(sys.argv[i]) == 1
    elif arg == '-spot':
        spot = sys.argv[i]
    else:
        die( f'unknown option: {arg}' )
    i += 1

bundle_tar_path = f'{bundle_name}.tar.gz'
if not os.path.exists( bundle_tar_path ): 
    die( f'bundle {bundle_tar_path} not found, use -bundle switch to change name' )

if do_launch:
    print( f'Removing local results files...' )
    cmd( f'rm -f results*.out results*.tar.gz' )

    print( f'Copying {bundle_tar_path} to master instance in fresh ./run dir...' )
    cmd( f'on_inst rm -fr ./run; mkdir ./run' )
    cmd( f'to_inst {bundle_tar_path} ./run/{bundle_tar_path}' )

    print( f'Untaring and building bundle on master instance under ./run dir...' )
    cmd( f'on_inst cd ./run; tar xvfz {bundle_tar_path}; ./build.sh' )

    print( f'Launching {inst_cnt} instances that are clones of the master instance...' )
    script = get_script_dir() + '/run_run_sh'
    spot = f' -spot {spot}' if spot != '' else ''
    cmd( f'create_insts {inst_cnt} -script {script} -clone_master {spot}' )
else:
    print( f'NOT relaunching work' )

if do_harvest:
    print( f'Harvesting results...' )
    image = cmd( 'my_image', echo=False, echo_stdout=True )
    while True:
        # get list of all instances that use image
        s = cmd( f'my_insts -image {image} -show_state', echo=False, echo_stdout=True )
        lines = s.rstrip( '\n' ).splitlines()

        # for each one in the stopped state, figure out its index, copy
        # and the stdout and results.tar.gz file to this PC. Then delete the instance.
        num_left = 0
        for line in lines:
            fields = line.split()
            name = fields[0]
            state = fields[1]
            if state == 'stopped':
                print( f'Harvesting {name}...' )
                # copy results.stdout file
                # get instance id
                # copy results.tar.gz file
                # delete instance
                print( f'Deleting {name}...' )
                cmd( f'delete_inst {name}' )
            elif state == 'stopping' or state == 'running':
                num_left += 1

        if num_left == 0:
            print( 'Done harvesting results' )
            break

        print( f'Sleeping for 60 seconds because {num_left} instances are not done yet' )
        sleep( 60 )
            
else:
    print( f'NOT harvesting results' )
